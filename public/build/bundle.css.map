{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Header.svelte",
    "../../Main.svelte",
    "../../Footer.svelte",
    "../../Table.svelte",
    "../../EventSelect.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Header from \"./Header.svelte\";\n  import Main from \"./Main.svelte\";\n  import Footer from \"./Footer.svelte\";\n</script>\n\n<style>\n  .container {\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n  }\n</style>\n\n<div class=\"container\">\n  <Header />\n  <Main />\n  <Footer />\n</div>\n\n<!-- https://jsfiddle.net/RMarsh/bzuasLcz/3/\nhttps://www.google.com/search?q=svelte+with+firebase&oq=svelte+with+firebase+&aqs=chrome..69i57j0l2.9316j1j7&client=ms-unknown&sourceid=chrome-mobile&ie=UTF-8\nhttps://fireship.io/lessons/svelte-v3-overview-firebase/\nhttps://medium.com/javascript-in-plain-english/looking-into-svelte-3-b3d0b43cd794\nhttps://svelte.dev/docs#svelte_store\nhttps://svelte.dev/\nhttps://tobiasahlin.com/blog/layered-smooth-box-shadows/\nhttps://svelte.dev/examples#hello-world\nhttps://madewithsvelte.com/?page=5\nhttps://madewithsvelte.com/svelte-notifications\nhttps://madewithsvelte.com/svelte-table\nhttps://github.com/dasDaniel/svelte-table/blob/master/example/App.svelte -->\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { auth, reader } from \"../database\";\n  import { user } from \"../store/store.js\";\n\n  let loginUser = {\n    email: \"\",\n    password: \"\"\n  };\n\n  async function login() {\n    const result = await auth.login(loginUser);\n    const details = await reader.getUserByUserId(result.user.uid);\n    localStorage.setItem(\"ys-login\", btoa(JSON.stringify(loginUser)));\n    user.set({ ...result.user, ...details });\n  }\n\n  async function logout() {\n    await auth.logout();\n    localStorage.removeItem(\"ys-login\");\n    loginUser = { email: \"\", password: \"\" };\n    user.set(null);\n  }\n\n  onMount(async () => {\n    const cryptedUser = localStorage.getItem(\"ys-login\");\n    if (!cryptedUser) {\n      return;\n    }\n\n    const user = JSON.parse(atob(cryptedUser));\n    if (!user) {\n      return;\n    }\n\n    loginUser = user;\n    await login();\n  });\n</script>\n\n<style>\n  header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 60px;\n    padding: 4px 8px;\n    background: lightsteelblue;\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.25), 0 2px 2px rgba(0, 0, 0, 0.2),\n      0 4px 4px rgba(0, 0, 0, 0.15), 0 8px 8px rgba(0, 0, 0, 0.1),\n      0 16px 16px rgba(0, 0, 0, 0.05);\n  }\n\n  header > h2 {\n    letter-spacing: 0.1em;\n  }\n\n  .ctrl {\n    box-sizing: border-box;\n    padding: 8px;\n    font-size: medium;\n    border: 1px solid steelblue;\n    border-radius: 4px;\n    outline: none;\n    font-family: inherit;\n    background: inherit;\n  }\n\n  .ctrl:hover,\n  .ctrl:focus {\n    border: 1px solid lightgray;\n  }\n\n  .ctrl_input {\n    width: 250px;\n  }\n\n  .ctrl_button {\n    text-transform: uppercase;\n    cursor: pointer;\n  }\n</style>\n\n<header>\n  <h2>Scoreboard</h2>\n  <div>\n    <input\n      bind:value={loginUser.email}\n      class=\"ctrl ctrl_input\"\n      type=\"text\"\n      placeholder=\"enter your email\" />\n    <input\n      bind:value={loginUser.password}\n      class=\"ctrl ctrl_input\"\n      type=\"password\"\n      placeholder=\"enter your password\" />\n    <button class=\"ctrl ctrl_button\" on:click={login}>login</button>\n    <button class=\"ctrl ctrl_button\" on:click={logout}>logout</button>\n  </div>\n</header>\n",
    "<script>\n  import { onDestroy } from \"svelte\";\n  import Table from \"./Table.svelte\";\n  import EventSelect from \"./EventSelect.svelte\";\n\n  import { user } from \"../store/store.js\";\n\n  let localeUser;\n  let selectedEventId;\n\n  const unsubscriber = user.subscribe(async remoteUser => {\n    localeUser = remoteUser;\n  });\n\n  async function handleSelectedEvent(event) {\n    selectedEventId = event.detail.id;\n  }\n\n  onDestroy(unsubscriber);\n</script>\n\n<style>\n  main {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: calc(100vh - 68px - 48px);\n    padding: 8px;\n  }\n\n  .left-col {\n    width: 74%;\n    padding-right: 6px;\n    border-right: 1px solid black;\n  }\n\n  .right-col {\n    width: 25%;\n    padding-left: 4px;\n  }\n</style>\n\n<main>\n  {#if localeUser}\n    <div class=\"left-col\">\n      <Table eventId={selectedEventId} userRole={localeUser.role} />\n    </div>\n    <div class=\"right-col\">\n      <EventSelect on:selected-event={handleSelectedEvent} />\n    </div>\n  {:else}\n    <span>User is not logged in.</span>\n  {/if}\n</main>\n",
    "<script>\n\n</script>\n\n<style>\n  footer {\n    display: flex;\n    align-items: center;\n    height: 48px;\n    padding: 4px 8px;\n    background: lightsteelblue;\n  }\n</style>\n\n<footer>\n  <span>developed by flashback2k14</span>\n</footer>\n",
    "<script>\n  import { afterUpdate } from \"svelte\";\n  import { reader, updater } from \"../database\";\n  import {\n    convertToDate,\n    convertToTimestamp,\n    convertToTableData,\n    updateScores,\n    initTableData\n  } from \"../utils\";\n\n  export let eventId;\n  export let userRole;\n\n  $: {\n    if (eventId) {\n      loadData();\n    }\n\n    if (userRole) {\n      onlyAdmin = userRole === \"admin\";\n    }\n  }\n\n  let onlyAdmin;\n  let remoteData;\n  let tableData;\n\n  let newParticipant;\n  let selectedNewDate;\n\n  async function loadData() {\n    const data = await reader.getEventDataByEventId(eventId);\n    remoteData = data;\n    tableData = data ? convertToTableData(data) : initTableData();\n  }\n\n  async function addNewDate() {\n    remoteData.dayCount++;\n    const newDayKey = `day${remoteData.dayCount}`;\n    remoteData.days[newDayKey] = convertToTimestamp(selectedNewDate);\n\n    Object.entries(remoteData.scores).forEach(([key, value]) => {\n      const participant = key;\n      value[newDayKey] = 0;\n      remoteData.scores[participant] = value;\n    });\n\n    const newData = {\n      ...remoteData\n    };\n\n    await updater.updateEventData(remoteData.id, newData);\n    await loadData();\n\n    selectedNewDate = \"\";\n  }\n\n  async function addNewParticipant() {\n    remoteData.participants[newParticipant] = newParticipant;\n\n    let newRow = {};\n    for (var i = 1; i <= remoteData.dayCount; i++) {\n      newRow[`day${i}`] = 0;\n    }\n\n    remoteData.scores[newParticipant] = newRow;\n\n    const newData = {\n      ...remoteData\n    };\n\n    await updater.updateEventData(remoteData.id, newData);\n    await loadData();\n\n    newParticipant = \"\";\n  }\n\n  async function handleOnBlur(e, rowIndex, colIndex) {\n    tableData.rowData[rowIndex][colIndex] = e.target.value;\n    const newScores = updateScores(tableData.rowData);\n\n    const newData = {\n      ...remoteData,\n      scores: newScores\n    };\n\n    await updater.updateEventData(remoteData.id, newData);\n    await loadData();\n  }\n</script>\n\n<style>\n  .table-scroll {\n    width: inherit;\n    overflow-x: auto;\n    margin-top: 4px;\n    margin-bottom: 8px;\n  }\n\n  .table-scroll table tr:nth-child(1) th:first-child,\n  .table-scroll table td:first-child {\n    position: sticky;\n    left: 0;\n    background-color: #ddd;\n  }\n\n  .table-scroll table tr:nth-child(1) th:last-child,\n  .table-scroll table td:last-child {\n    position: sticky;\n    right: 0;\n    background-color: #ddd;\n  }\n\n  table {\n    border-collapse: collapse;\n  }\n\n  .ctrls-container {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .ctrl-container {\n    margin-top: 4px;\n  }\n\n  .ctrl {\n    box-sizing: border-box;\n    padding: 8px;\n    font-size: medium;\n    border: 1px solid lightgray;\n    border-radius: 4px;\n    outline: none;\n    font-family: inherit;\n  }\n\n  .ctrl:hover,\n  .ctrl:focus {\n    border: 1px solid steelblue;\n  }\n\n  .ctrl_input {\n    width: 250px;\n  }\n\n  .ctrl_date {\n    padding: 5px;\n  }\n\n  .ctrl_button {\n    text-transform: uppercase;\n    cursor: pointer;\n  }\n</style>\n\n<div>\n  {#if eventId}\n    <!-- {@debug tableData} -->\n\n    {#if onlyAdmin}\n      <div class=\"ctrls-container\">\n\n        <div class=\"ctrl-container\">\n          <input\n            bind:value={selectedNewDate}\n            class=\"ctrl ctrl_input ctrl_date\"\n            type=\"date\" />\n          <button class=\"ctrl ctrl_button\" on:click={addNewDate}>\n            Add new Date\n          </button>\n        </div>\n\n        <div class=\"ctrl-container\">\n          <input\n            bind:value={newParticipant}\n            class=\"ctrl ctrl_input\"\n            type=\"text\"\n            placeholder=\"enter new participant\" />\n          <button class=\"ctrl ctrl_button\" on:click={addNewParticipant}>\n            Add new Participant\n          </button>\n        </div>\n\n      </div>\n    {/if}\n\n    {#if tableData}\n      <div class=\"ctrl-container table-scroll\">\n        <table border=\"solid 1px black\" cellpadding=\"4\">\n          <thead>\n            <tr>\n              <th align=\"left\" rowspan=\"2\">Teilnehmer</th>\n              {#each tableData.rowHeaders as header}\n                <th>Datum / Punktzahl</th>\n              {/each}\n              <th align=\"left\" rowspan=\"2\">Summe</th>\n            </tr>\n            <tr>\n              {#each tableData.rowHeaders as header}\n                <th>{header}</th>\n              {/each}\n            </tr>\n          </thead>\n          <tbody>\n            {#each tableData.rowData as data, rowIndex}\n              <tr>\n                {#each data as entry, colIndex}\n                  <td>\n                    {#if colIndex === 0 || colIndex === data.length - 1 || !onlyAdmin}\n                      <span>{entry}</span>\n                    {:else}\n                      <input\n                        type=\"number\"\n                        value={entry}\n                        on:blur={e => handleOnBlur(e, rowIndex, colIndex)} />\n                    {/if}\n                  </td>\n                {/each}\n              </tr>\n            {/each}\n          </tbody>\n        </table>\n      </div>\n    {/if}\n  {:else}\n    <span>No event selected.</span>\n  {/if}\n</div>\n",
    "<script>\n  import { onDestroy, createEventDispatcher } from \"svelte\";\n\n  import { user } from \"../store/store.js\";\n  import { creator, reader } from \"../database\";\n\n  let onlyAdmin = false;\n  let localeUser = null;\n  let selectableEvents = [];\n  let selectableUsers = [];\n  let selectedEvent = null;\n  let selectedUsers = [];\n  let addEventInput = \"\";\n\n  const dispatch = createEventDispatcher();\n\n  const unsubscriber = user.subscribe(async remoteUser => {\n    localeUser = remoteUser;\n    onlyAdmin = remoteUser.role === \"admin\";\n\n    if (remoteUser) {\n      selectableEvents =\n        remoteUser.role === \"read-only\"\n          ? await reader.getEventsByViewerRefs(remoteUser.events)\n          : await reader.getEventsByUserId(remoteUser.uid);\n    }\n  });\n\n  async function handleEventSelectionChange() {\n    selectedUsers = [];\n    selectableUsers = [];\n    dispatch(\"selected-event\", { id: selectedEvent });\n    selectableUsers = await reader.getUsersByRole(\"read-only\");\n  }\n\n  async function addEvent() {\n    const createdEvent = await creator.addEvent(localeUser.uid, addEventInput);\n    await creator.addEventData(createdEvent.id);\n    selectableEvents = await reader.getEventsByUserId(localeUser.uid);\n    addEventInput = \"\";\n  }\n\n  function shouldBeSelected(userId, events) {\n    for (const event of events) {\n      if (event.id === selectedEvent) {\n        selectedUsers.push(userId);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function addUsers() {\n    console.log(selectedUsers);\n    console.log(Array.from(new Set([...selectedUsers])));\n  }\n\n  onDestroy(unsubscriber);\n</script>\n\n<style>\n  .container {\n    margin-top: 8px;\n  }\n\n  .ctrl-container {\n    margin-top: 4px;\n  }\n\n  .ctrl {\n    box-sizing: border-box;\n    padding: 8px;\n    font-size: medium;\n    border: 1px solid lightgray;\n    border-radius: 4px;\n    outline: none;\n    font-family: inherit;\n  }\n\n  .ctrl:hover,\n  .ctrl:focus {\n    border: 1px solid steelblue;\n  }\n\n  .ctrl_select {\n    width: calc(100% - 4px);\n    height: 36px;\n    font-size: medium;\n  }\n\n  .ctrl_select-multi {\n    height: 78px;\n  }\n\n  .ctrl_input {\n    width: 82%;\n  }\n\n  .ctrl_button {\n    text-transform: uppercase;\n    cursor: pointer;\n  }\n</style>\n\n<div class=\"container\">\n  <select\n    class=\"ctrl ctrl_select\"\n    bind:value={selectedEvent}\n    on:change={handleEventSelectionChange}>\n    <option value=\"nothing\" selected disabled>\n      Select an event or create one...\n    </option>\n    {#each selectableEvents as event}\n      <option value={event.id}>{event.name}</option>\n    {/each}\n  </select>\n\n  {#if onlyAdmin}\n    <hr />\n\n    <div class=\"ctrl-container\">\n      <input\n        bind:value={addEventInput}\n        class=\"ctrl ctrl_input\"\n        type=\"text\"\n        placeholder=\"add event name\" />\n      <button class=\"ctrl ctrl_button\" on:click={addEvent}>Add</button>\n    </div>\n\n    {#if selectableUsers.length > 0}\n      <hr />\n\n      <div class=\"ctrl-container\">\n        <select\n          class=\"ctrl ctrl_select ctrl_select-multi\"\n          multiple\n          bind:value={selectedUsers}>\n          {#each selectableUsers as user}\n            <option value={user.id}>\n              {user.name} {shouldBeSelected(user.id, user.events) ? '' : ''}\n            </option>\n          {/each}\n        </select>\n        <button\n          class=\"ctrl ctrl_button\"\n          style=\"margin-top: 4px\"\n          on:click={addUsers}>\n          Save\n        </button>\n      </div>\n    {/if}\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}